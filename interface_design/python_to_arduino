from PyQt5.QtWidgets import QLabel
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import random
from pyqtgraph import PlotWidget
from functools import partial
import pyqtgraph as pg
import serial

orange_pen = pg.mkPen(color=(255, 165, 0))  # RGB para laranja

class MockSerial:
    def __init__(self, port, baudrate):
        self.port = port
        self.baudrate = baudrate

    def write(self, data):
        print("Simulando envio de dados:", data)

    def readline(self):
        # Simular uma resposta
        return b"Simulando dados recebidos do Arduino\n"

    def in_waiting(self):
        # Simular sempre a existência de dados para ler
        return True

    def close(self):
        print("Fechando porta serial simulada")


class Ui_MainWindow(object):

    def send_data_to_arduino(self):
        # Exemplo: enviar o valor do throttle e uma flag
        throttle_value = sum(self.y_data[0][-self.lifespan:]) / len(self.y_data[0][-self.lifespan:])
        test_finished = 1  # Substitua com a lógica da sua flag
        data_to_send = f"{throttle_value},{test_finished}\n"
        self.serial_port.write(data_to_send.encode())
        print("funçao send data top")

    def read_data_from_arduino(self):
        if self.serial_port.in_waiting() > 0:
            data = self.serial_port.readline().decode().strip()
            print("Dados recebidos do Arduino:", data)
        print("funçao read data top")



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(983, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout.addWidget(self.frame, 0, QtCore.Qt.AlignTop)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_4 = QtWidgets.QFrame(self.frame_2)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.frame_4)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.horizontalSlider = QtWidgets.QSlider(self.frame_4)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout_3.addWidget(self.horizontalSlider)
        self.horizontalLayout.addWidget(self.frame_4)
        self.pushButton = QtWidgets.QPushButton(self.frame_2)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.checkBox_2 = QtWidgets.QCheckBox(self.frame_2)
        self.checkBox_2.setObjectName("checkBox_2")
        self.horizontalLayout.addWidget(self.checkBox_2)
        self.checkBox = QtWidgets.QCheckBox(self.frame_2)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout.addWidget(self.checkBox)
        self.verticalLayout.addWidget(self.frame_2, 0, QtCore.Qt.AlignTop)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_3.sizePolicy().hasHeightForWidth())
        self.frame_3.setSizePolicy(sizePolicy)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.scrollArea = QtWidgets.QScrollArea(self.frame_3)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 955, 487))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget_1 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_1.setObjectName("widget_1")
        self.verticalLayout_5.addWidget(self.widget_1)
        self.widget_1.setXRange(0, 30)
        self.widget_1.setYRange(-0.0010, 0.0010)
        
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_data)
        self.timer.timeout.connect(self.read_data_from_arduino)
        self.timer.timeout.connect(self.send_data_to_arduino)
        self.timer.start(1000)  # Atualizar a cada 1000 milissegundos = 1 segundo
        self.widget_3 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_5.addWidget(self.widget_3)
        self.widget_2 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_5.addWidget(self.widget_2)
        self.widget_4 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_5.addWidget(self.widget_4)
        self.widget = PlotWidget(self.scrollAreaWidgetContents)
        self.widget.setObjectName("widget")
        self.verticalLayout_5.addWidget(self.widget)
        self.widget_5 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_5.setObjectName("widget_5")
        self.verticalLayout_5.addWidget(self.widget_5)
        self.widget_6 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_6.setObjectName("widget_6")
        self.verticalLayout_5.addWidget(self.widget_6)
        self.widget_7 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_7.setObjectName("widget_7")
        self.verticalLayout_5.addWidget(self.widget_7)
        self.widget_8 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_8.setObjectName("widget_8")
        self.verticalLayout_5.addWidget(self.widget_8)
        self.widget_9 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_9.setObjectName("widget_9")
        self.verticalLayout_5.addWidget(self.widget_9)
        self.widget_10 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_10.setObjectName("widget_10")
        self.verticalLayout_5.addWidget(self.widget_10)
        self.widget_11 = PlotWidget(self.scrollAreaWidgetContents)
        self.widget_11.setObjectName("widget_11")
        self.verticalLayout_5.addWidget(self.widget_11)
        
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_4.addWidget(self.scrollArea)
        self.verticalLayout.addWidget(self.frame_3)
        MainWindow.setCentralWidget(self.centralwidget)

        self.slider_label = QtWidgets.QLabel(self.frame_2)  # Ou qualquer outro widget pai adequado
        self.horizontalLayout.addWidget(self.slider_label)  # Adiciona ao mesmo layout que o seu slider
        self.horizontalSlider.valueChanged.connect(self.send_data_to_arduino)
        self.checkBoxes = []  # Adicionando uma lista para armazenar as checkboxes

        self.x_data = []  # Lista para armazenar valores do eixo X
        self.y_data = [[] for _ in range(11)]  # Lista de listas para armazenar valores do eixo Y para cada gráfico

        self.serial_port = MockSerial('COM3', 9600)  # Substitua 'COM3' pela porta do Arduino

        self.layoutButton = QtWidgets.QPushButton("Layout", self.frame_2)
        self.horizontalLayout.addWidget(self.layoutButton)
        self.layoutButton.clicked.connect(self.toggle_checkboxes_visibility)

        self.checkBoxes = []
        for i in range(1, 12):
            checkBox = QtWidgets.QCheckBox(f"Show Graph {i}", self.frame_2)
            checkBox.setObjectName(f"checkBox_{i}")
            self.horizontalLayout.addWidget(checkBox)
            checkBox.setChecked(True)
            checkBox.stateChanged.connect(partial(self.toggle_graph_visibility, i))
            checkBox.setVisible(False)  # Inicialmente, os checkboxes não estão visíveis
            self.checkBoxes.append(checkBox)



        self.horizontalSlider.setMinimum(0)  # valor mínimo
        self.horizontalSlider.setMaximum(60)  # valor máximo
        
        self.horizontalSlider.setMaximum(60)  # Permite selecionar até 60 no slider.

        # Conectar o botão de pausa a um método
        self.pushButton.clicked.connect(self.toggle_data_update)

        # Conectar o slider a um método
        self.horizontalSlider.valueChanged.connect(self.update_lifespan)

        # Variáveis de controle
        self.is_updating = True  # Controla se os dados estão sendo atualizados ou não
        self.lifespan = 10  # Tempo inicial em segundos durante o qual os dados serão gerados
        self.time_elapsed = 0  # Tempo que já passou desde que os dados começaram a ser gerados

        self.avg_labels = []
        for i in range(1, 12):  # Para cada gráfico
            label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
            label.setObjectName(f"avg_label_{i}")
            self.verticalLayout_5.addWidget(label)
            self.avg_labels.append(label)

        titles = [
            "ESC throttle output",
            "Force Fz (thrust)",
            "Torque MZ (torque)",
            "Voltage",
            "Current",
            "Rotation Speed",
            "Eletrical Power",
            "Mechanical Power",
            "Motor & ESC efficiency",
            "Propeller efficiency",
            "Powertrain efficiency"
        ]

        # Certifique-se de que tem widgets suficientes para todos os seus títulos
        assert len(titles) == 11, "O número de títulos não é igual a 11."

        # Configure os títulos
        for i, title in enumerate(titles):
            widget_name = f"widget_{i+1}"  # começa a partir do widget_3
            widget = getattr(self, widget_name, None)
            
            # Verifique se o widget existe antes de tentar configurá-lo
            if widget is not None:
                widget.setTitle(title)
            else:
                raise Exception(f"O widget chamado '{widget_name}' não existe!")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton.clicked.connect(self.on_pushButton_clicked)
        self.checkBox_2.stateChanged.connect(self.on_checkBox_2_stateChanged)

    def toggle_checkboxes_visibility(self):
        for checkbox in self.checkBoxes:
            checkbox.setVisible(not checkbox.isVisible())

    def generate_random_data(self, num_points=100):
        """Gera um conjunto de dados aleatórios."""
        for data_list in self.random_data_lists:
            for _ in range(num_points):
                data_list.append(random.uniform(-0.0010, 0.0010))

    def toggle_graph_visibility(self, graph_index, _):
        # Já que agora o índice é passado diretamente, podemos usá-lo diretamente para
        # acessar o widget correspondente.
        graph_widget = getattr(self, f"widget_{graph_index}")

        # Não precisamos usar sender(), então podemos verificar diretamente a checkbox correspondente
        if self.checkBoxes[graph_index-1].isChecked():
            graph_widget.show()
        else:
            graph_widget.hide()

    def on_pushButton_clicked(self):
        print("Settings button was pressed!")
        # (O restante da sua lógica pode ir aqui)

    def on_checkBox_2_stateChanged(self):
        print("Checkbox 2 state was changed!")
        # (O restante da sua lógica pode ir aqui)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Real Time Plotting"))
        self.label_2.setText(_translate("MainWindow", "Life span"))
        self.pushButton.setText(_translate("MainWindow", "Settings"))
        self.checkBox_2.setText(_translate("MainWindow", "Pause"))
        self.checkBox.setText(_translate("MainWindow", "Show Unfiltered"))

    def on_pushButton_clicked(self):
        # Esta função será chamada quando o botão "Settings" for pressionado.
        print("Settings Button Pressed!")
        # Aqui você pode adicionar o código que você quer que seja executado
        # quando o botão é pressionado. Por exemplo, abrir uma nova janela,
        # atualizar um gráfico, etc.

    def toggle_data_update(self):
        # Este método será chamado quando o botão de pausa for clicado
        self.is_updating = not self.is_updating
        # Se os dados estão sendo atualizados, comece a temporizar, caso contrário, pare o timer.
        if self.is_updating:
            self.timer.start(1000)  # Iniciar o timer ao retomar
            self.time_elapsed = 0  # Restabelecer o tempo decorrido ao retomar
        else:
            self.timer.stop()  # Parar o timer ao pausar


    def update_lifespan(self, value):
        self.lifespan = value
        # Não redefina o time_elapsed aqui!

        self.slider_label.setText(str(value))  # Atualiza o texto do QLabel

        if self.is_updating:
            self.timer.start(1000)  # Se os dados estão sendo atualizados, reinicia o timer

        self.update_data()  # Atualiza a visualização dos dados após mudar a lifespan

    def update_data(self):
        # Verifique se a atualização está pausada.
        if self.checkBox_2.isChecked():  
            return

        # Incrementa o contador de tempo.
        self.time_elapsed += 1  
    
        # Nova lógica para gerenciar os dados de x e y.
        self.x_data.append(self.time_elapsed)  # Adiciona o novo ponto de tempo.
    
        titles = [
            "ESC throttle output",
            "Force Fz (thrust)",
            "Torque MZ (torque)",
            "Voltage",
            "Current",
            "Rotation Speed",
            "Electrical Power",
            "Mechanical Power",
            "Motor & ESC efficiency",
            "Propeller efficiency",
            "Powertrain efficiency"
        ]

    

        assert len(titles) == 11, "O número de títulos não é igual a 11."
    
        for i, title in enumerate(titles):
            # Adiciona um novo ponto de dados y.
            self.y_data[i].append(random.uniform(-0.0010, 0.0010))  
        
            # Mantém os últimos [lifespan] pontos de dados para x e y.
            display_x_data = self.x_data[-self.lifespan:]
            display_y_data = self.y_data[i][-self.lifespan:]
        
            widget_name = f"widget_{i+1}"  
            widget = getattr(self, widget_name, None)
        
            if widget is not None:
                # Limpa os dados antigos.
                widget.clear()
            
                average_y = sum(display_y_data) / len(display_y_data)
                widget.setTitle(f"Average {title}: {average_y:.4f}")
                widget.plot(display_x_data, display_y_data, clear=True, pen=orange_pen)
                # Ajustar o alcance do eixo x para o lifespan atual.
                widget.setXRange(max(self.x_data) - self.lifespan, max(self.x_data), padding=0)
            else:
                raise Exception(f"O widget chamado '{widget_name}' não existe!")


    # Inicializa as listas de dados no construtor ou em uma função de inicialização.
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
    
        self.x_data = []
        self.y_data = [[] for _ in range(11)]  # 11 listas vazias para cada série de dados y.

    def closeEvent(self, event):
        self.ui.serial_port.close()  # Fecha a porta serial
        super().closeEvent(event)


    

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

   
